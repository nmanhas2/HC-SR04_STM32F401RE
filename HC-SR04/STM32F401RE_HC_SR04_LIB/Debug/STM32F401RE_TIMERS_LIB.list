
STM32F401RE_TIMERS_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001544  0800154c  0001154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001544  08001544  0001154c  2**0
                  CONTENTS
  4 .ARM          00000000  08001544  08001544  0001154c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001544  0800154c  0001154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001544  08001544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001548  08001548  00011548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  0800154c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  0800154c  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001154c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001157c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f55  00000000  00000000  000115bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000069d  00000000  00000000  00013514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00013bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fd  00000000  00000000  00013d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ec86  00000000  00000000  00013e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020b6  00000000  00000000  00022aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054515  00000000  00000000  00024b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006a8  00000000  00000000  00079070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00079718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800152c 	.word	0x0800152c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800152c 	.word	0x0800152c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <gpio_init>:
 * gpioX = GPIO_TypeDef* (ie. pointer to GPIOA, GPIOB, etc, this is defined in stm32f401xe.h)
 * GPIOx_PIN_CONFIG = struct containing enums that have the bits needed for pin number and
 * 					  pin mode
 */
void gpio_init (GPIO_TypeDef* gpioX, GPIOx_PIN_CONFIG pin)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	e883 0006 	stmia.w	r3, {r1, r2}
	//enable clock access to GPIOx w/ AHB1
	if(gpioX == GPIOA)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <gpio_init+0xd0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d106      	bne.n	8000af8 <gpio_init+0x24>
	{
		RCC->AHB1ENR |= AHB1ENR_GPIOA_EN;
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <gpio_init+0xd4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a2e      	ldr	r2, [pc, #184]	; (8000ba8 <gpio_init+0xd4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	e035      	b.n	8000b64 <gpio_init+0x90>
	} else if(gpioX == GPIOB){
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4a2c      	ldr	r2, [pc, #176]	; (8000bac <gpio_init+0xd8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d106      	bne.n	8000b0e <gpio_init+0x3a>
		RCC->AHB1ENR |= AHB1ENR_GPIOB_EN;
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <gpio_init+0xd4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <gpio_init+0xd4>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	e02a      	b.n	8000b64 <gpio_init+0x90>
	}else if(gpioX == GPIOC){
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <gpio_init+0xdc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d106      	bne.n	8000b24 <gpio_init+0x50>
		RCC->AHB1ENR |= AHB1ENR_GPIOC_EN;
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <gpio_init+0xd4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <gpio_init+0xd4>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	e01f      	b.n	8000b64 <gpio_init+0x90>
	}else if(gpioX == GPIOD){
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <gpio_init+0xe0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d106      	bne.n	8000b3a <gpio_init+0x66>
		RCC->AHB1ENR |= AHB1ENR_GPIOD_EN;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <gpio_init+0xd4>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <gpio_init+0xd4>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	e014      	b.n	8000b64 <gpio_init+0x90>
	}else if(gpioX == GPIOE){
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <gpio_init+0xe4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d106      	bne.n	8000b50 <gpio_init+0x7c>
		RCC->AHB1ENR |= AHB1ENR_GPIOE_EN;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <gpio_init+0xd4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <gpio_init+0xd4>)
 8000b48:	f043 0310 	orr.w	r3, r3, #16
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	e009      	b.n	8000b64 <gpio_init+0x90>
	}else if(gpioX == GPIOH){
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <gpio_init+0xe8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d121      	bne.n	8000b9c <gpio_init+0xc8>
		RCC->AHB1ENR |= AHB1ENR_GPIOH_EN;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <gpio_init+0xd4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <gpio_init+0xd4>)
 8000b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
	} else{
		return;
	}

	//set pin mode
	gpio_set_moder(gpioX, pin);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f000 f84e 	bl	8000c0c <gpio_set_moder>

	//set internal resistors
	gpio_set_pupdr(gpioX, pin);
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f000 f86b 	bl	8000c52 <gpio_set_pupdr>

	//set output type
	gpio_set_otyper(gpioX, pin);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f000 f81c 	bl	8000bc0 <gpio_set_otyper>

	//check if alternate function needs to be set
	if(pin.PIN_MODE == GPIOx_PIN_ALTERNATE)
 8000b88:	797b      	ldrb	r3, [r7, #5]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d107      	bne.n	8000b9e <gpio_init+0xca>
	{
		gpio_alt_func(gpioX, pin);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 f882 	bl	8000c9e <gpio_alt_func>
 8000b9a:	e000      	b.n	8000b9e <gpio_init+0xca>
		return;
 8000b9c:	bf00      	nop
	}
}
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40021c00 	.word	0x40021c00

08000bc0 <gpio_set_otyper>:
 * available
 *
 * 8.4.2 in Ref Manual
 */
void gpio_set_otyper(GPIO_TypeDef* gpioX, GPIOx_PIN_CONFIG pin)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	e883 0006 	stmia.w	r3, {r1, r2}
	//check for the output mode, 0 = push-pull,
	//1 = open-drain
	if(pin.OTYPER_MODE == GPIOx_OTYPER_PUSH_PULL)
 8000bce:	7a3b      	ldrb	r3, [r7, #8]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <gpio_set_otyper+0x28>
	{
		gpioX->OTYPER &= ~(1U<<pin.PIN_NUM);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	793b      	ldrb	r3, [r7, #4]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2301      	movs	r3, #1
 8000bde:	408b      	lsls	r3, r1
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	605a      	str	r2, [r3, #4]
	}

	if(pin.OTYPER_MODE == GPIOx_OTYPER_OPEN_DRAIN)
 8000be8:	7a3b      	ldrb	r3, [r7, #8]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d108      	bne.n	8000c00 <gpio_set_otyper+0x40>
	{
		gpioX->OTYPER |= (1U<<pin.PIN_NUM);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	605a      	str	r2, [r3, #4]
	}
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <gpio_set_moder>:
 *
 * There are four modes: Output, Input, Alternate Function, and Analog Mode
 * 8.4.1 in Ref Manual
 */
void gpio_set_moder(GPIO_TypeDef* gpioX, GPIOx_PIN_CONFIG pin)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	e883 0006 	stmia.w	r3, {r1, r2}
	//clear pin
	gpioX->MODER &= ~(0x3 << (2*pin.PIN_NUM));
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	793a      	ldrb	r2, [r7, #4]
 8000c20:	0052      	lsls	r2, r2, #1
 8000c22:	2103      	movs	r1, #3
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	601a      	str	r2, [r3, #0]

	//set pin mode, need to multiply by 2 because MODER is 32bit and each pin has 2 bits
	//that correspond to it's mode. PA15's mode for example can be set on bits 30 and 31
	gpioX->MODER |= (pin.PIN_MODE << (2*pin.PIN_NUM));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	797a      	ldrb	r2, [r7, #5]
 8000c36:	4611      	mov	r1, r2
 8000c38:	793a      	ldrb	r2, [r7, #4]
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	431a      	orrs	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <gpio_set_pupdr>:
 * Pull-up, pull-down, or none are the option available
 *
 * 8.4.4 in Ref Manual
 */
void gpio_set_pupdr(GPIO_TypeDef* gpioX, GPIOx_PIN_CONFIG pin)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	e883 0006 	stmia.w	r3, {r1, r2}
	//clear pupdr for the pin
	gpioX->PUPDR &= ~(0x3 << (2*pin.PIN_NUM));
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	793a      	ldrb	r2, [r7, #4]
 8000c66:	0052      	lsls	r2, r2, #1
 8000c68:	2103      	movs	r1, #3
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	43d2      	mvns	r2, r2
 8000c70:	401a      	ands	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	60da      	str	r2, [r3, #12]

	//check if it's not 'none', since the bits already
	//been cleared
	if(pin.PUPDR_MODE != GPIOx_PUPDR_NONE)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00a      	beq.n	8000c92 <gpio_set_pupdr+0x40>
	{
		//2 bits correspond to each pin
		gpioX->PUPDR |= (pin.PUPDR_MODE << (2*pin.PIN_NUM));
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	4611      	mov	r1, r2
 8000c84:	793a      	ldrb	r2, [r7, #4]
 8000c86:	0052      	lsls	r2, r2, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	60da      	str	r2, [r3, #12]
	}

}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <gpio_alt_func>:
 * Alternate function selection
 *
 * 8.4.9/8.4.10 in Ref Manual
 */
void gpio_alt_func(GPIO_TypeDef* gpioX, GPIOx_PIN_CONFIG pin)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b085      	sub	sp, #20
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	e883 0006 	stmia.w	r3, {r1, r2}
	//Px0 to Px7 are in the AFRL register
	//with Px8 to Px15 being on the AFRH register
	//just need to set the corresponding 4 bits
	//to the alternate function you want
	if(pin.PIN_NUM <=  7)
 8000cac:	793b      	ldrb	r3, [r7, #4]
 8000cae:	2b07      	cmp	r3, #7
 8000cb0:	d80a      	bhi.n	8000cc8 <gpio_alt_func+0x2a>
	{
		gpioX->AFR[0] |= (pin.ALT_FUNC<<(pin.PIN_NUM * 4));
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6a1b      	ldr	r3, [r3, #32]
 8000cb6:	79ba      	ldrb	r2, [r7, #6]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	793a      	ldrb	r2, [r7, #4]
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	621a      	str	r2, [r3, #32]
	}

	if(pin.PIN_NUM >  7)
 8000cc8:	793b      	ldrb	r3, [r7, #4]
 8000cca:	2b07      	cmp	r3, #7
 8000ccc:	d90b      	bls.n	8000ce6 <gpio_alt_func+0x48>
	{
		//subtracting the pin number by 8 because pin 8 start at bit 0 in the AFRH register
		gpioX->AFR[1] |= (pin.ALT_FUNC<<((pin.PIN_NUM - 8 )* 4));
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	79ba      	ldrb	r2, [r7, #6]
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	793a      	ldrb	r2, [r7, #4]
 8000cd8:	3a08      	subs	r2, #8
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <main>:
TIM2_5_CAPTURE_COMPARE_CONFIG COMPARE_CAPTURE; //struct to configure input capture

int timestamp = 0; //used to store input capture counter, global allows one to use live expressions in the debugger to view

int main(void)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af06      	add	r7, sp, #24
	//UART with PA3 as RX, PA2 as TX for USART2
	UART2.PORT = GPIOA;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <main+0x8c>)
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <main+0x90>)
 8000cfe:	609a      	str	r2, [r3, #8]
	UART2.RX = USART2_RX_PA3;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <main+0x8c>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	705a      	strb	r2, [r3, #1]
	UART2.TX = USART2_TX_PA2;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <main+0x8c>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	701a      	strb	r2, [r3, #0]
	UART2.USART = USART2;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <main+0x8c>)
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <main+0x94>)
 8000d10:	605a      	str	r2, [r3, #4]

	//Initializing 1Hz timer
	TMR2.PERIOD = 100;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <main+0x98>)
 8000d14:	2264      	movs	r2, #100	; 0x64
 8000d16:	60da      	str	r2, [r3, #12]
	TMR2.PRESCALER = 16000;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <main+0x98>)
 8000d1a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000d1e:	609a      	str	r2, [r3, #8]
	TMR2.TMR = TIM2;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <main+0x98>)
 8000d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d26:	601a      	str	r2, [r3, #0]

	//init uart at 115200 baud
	uart_init(UART2, 115200);
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <main+0x8c>)
 8000d2a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d30:	f000 fa3c 	bl	80011ac <uart_init>
		}
	#endif

	#ifdef PWM_TEST
		//up counter
		TMR2.COUNTER_MODE = TIM2_5_UP;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <main+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	711a      	strb	r2, [r3, #4]

		//Initializing compare mode pin
		CAPTURE_COMPARE.CAPTURE_COMPARE_MODE = TIM2_5_OUTPUT;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <main+0x9c>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	721a      	strb	r2, [r3, #8]
		CAPTURE_COMPARE.CHANNEL = TIM2_5_CH1;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <main+0x9c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	725a      	strb	r2, [r3, #9]
		CAPTURE_COMPARE.OUTPUT_MODE = TIM2_5_PWM_MODE1;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <main+0x9c>)
 8000d48:	2206      	movs	r2, #6
 8000d4a:	729a      	strb	r2, [r3, #10]
		CAPTURE_COMPARE.PIN_NUM = TIM2_CH1_PA5;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <main+0x9c>)
 8000d4e:	2205      	movs	r2, #5
 8000d50:	701a      	strb	r2, [r3, #0]
		CAPTURE_COMPARE.PORT = GPIOA;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <main+0x9c>)
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <main+0x90>)
 8000d56:	605a      	str	r2, [r3, #4]

		//init + enable output compare
		tim2_5_init_pwm(TMR2, CAPTURE_COMPARE, 50, TIM2_5_RISING_EDGE);
 8000d58:	4c0c      	ldr	r4, [pc, #48]	; (8000d8c <main+0x98>)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9304      	str	r3, [sp, #16]
 8000d5e:	2332      	movs	r3, #50	; 0x32
 8000d60:	9303      	str	r3, [sp, #12]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <main+0x9c>)
 8000d64:	466b      	mov	r3, sp
 8000d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000d6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d70:	f000 f93e 	bl	8000ff0 <tim2_5_init_pwm>

		tim2_5_enable(TMR2);
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <main+0x98>)
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	f000 fa06 	bl	8001188 <tim2_5_enable>
		while(1)
 8000d7c:	e7fe      	b.n	8000d7c <main+0x88>
 8000d7e:	bf00      	nop
 8000d80:	2000001c 	.word	0x2000001c
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	20000028 	.word	0x20000028
 8000d90:	20000038 	.word	0x20000038

08000d94 <pin_init>:
/*
 * Function to initialize a given GPIO compare/capture pin as an alternate function
 * for the given timer
 */
void pin_init(TIM2_5_CONFIG timer, TIM2_5_CAPTURE_COMPARE_CONFIG compare)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	463c      	mov	r4, r7
 8000d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//setup GPIO pin
	GPIOx_PIN_CONFIG pin;
	pin.PIN_NUM = compare.PIN_NUM;
 8000da0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000da4:	743b      	strb	r3, [r7, #16]
	pin.PIN_MODE = GPIOx_PIN_ALTERNATE;
 8000da6:	2302      	movs	r3, #2
 8000da8:	747b      	strb	r3, [r7, #17]
	pin.PUPDR_MODE = GPIOx_PUPDR_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	74fb      	strb	r3, [r7, #19]
	pin.OTYPER_MODE = GPIOx_OTYPER_PUSH_PULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	753b      	strb	r3, [r7, #20]

	//determine which alternate function mode to set
	//the GPIO pin as.
	//
	//Table 9. in Datasheet for mapping
	if(timer.TMR == TIM2)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d102      	bne.n	8000dc0 <pin_init+0x2c>
	{
		pin.ALT_FUNC = GPIOx_ALT_AF1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	74bb      	strb	r3, [r7, #18]
 8000dbe:	e00d      	b.n	8000ddc <pin_init+0x48>
	}
	else if(timer.TMR == TIM3 || timer.TMR == TIM4 || timer.TMR == TIM5)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <pin_init+0x60>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d007      	beq.n	8000dd8 <pin_init+0x44>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <pin_init+0x64>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d003      	beq.n	8000dd8 <pin_init+0x44>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <pin_init+0x68>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d109      	bne.n	8000dec <pin_init+0x58>
	{
		pin.ALT_FUNC = GPIOx_ALT_AF2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	74bb      	strb	r3, [r7, #18]
	{
		return;
	}

	//init the GPIO given pin for the timer channel
	gpio_init(compare.PORT, pin);
 8000ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000de6:	f7ff fe75 	bl	8000ad4 <gpio_init>
 8000dea:	e000      	b.n	8000dee <pin_init+0x5a>
		return;
 8000dec:	bf00      	nop
}
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	40000400 	.word	0x40000400
 8000df8:	40000800 	.word	0x40000800
 8000dfc:	40000c00 	.word	0x40000c00

08000e00 <tim2_5_init_output_compare>:
 * Function to initialize output compare for the given timer and pin
 *
 * 13.4.7 in Ref Manual
 */
void tim2_5_init_output_compare(TIM2_5_CONFIG timer, TIM2_5_CAPTURE_COMPARE_CONFIG compare)
{
 8000e00:	b490      	push	{r4, r7}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	463c      	mov	r4, r7
 8000e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//check for the channel, since the register and bit position will change
	//based on this, and set the bits required for the desired output
	//compare mode
	if(compare.CHANNEL == TIM2_5_CH1)
 8000e0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d109      	bne.n	8000e28 <tim2_5_init_output_compare+0x28>
	{
		timer.TMR->CCMR1 |= (compare.OUTPUT_MODE << TIM_CCMR1_OC1M_Pos);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	699a      	ldr	r2, [r3, #24]
 8000e18:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	619a      	str	r2, [r3, #24]
 8000e26:	e028      	b.n	8000e7a <tim2_5_init_output_compare+0x7a>
	}
	else if(compare.CHANNEL == TIM2_5_CH2)
 8000e28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d109      	bne.n	8000e44 <tim2_5_init_output_compare+0x44>
	{
		timer.TMR->CCMR1 |= (compare.OUTPUT_MODE << TIM_CCMR1_OC2M_Pos);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	699a      	ldr	r2, [r3, #24]
 8000e34:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8000e38:	031b      	lsls	r3, r3, #12
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	619a      	str	r2, [r3, #24]
 8000e42:	e01a      	b.n	8000e7a <tim2_5_init_output_compare+0x7a>
	}
	else if(compare.CHANNEL == TIM2_5_CH3)
 8000e44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d109      	bne.n	8000e60 <tim2_5_init_output_compare+0x60>
	{
		timer.TMR->CCMR2 |= (compare.OUTPUT_MODE << TIM_CCMR2_OC3M_Pos);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	61da      	str	r2, [r3, #28]
 8000e5e:	e00c      	b.n	8000e7a <tim2_5_init_output_compare+0x7a>
	}
	else if(compare.CHANNEL == TIM2_5_CH4)
 8000e60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d113      	bne.n	8000e90 <tim2_5_init_output_compare+0x90>
	{
		timer.TMR->CCMR2 |= (compare.OUTPUT_MODE << TIM_CCMR2_OC4M_Pos);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	69da      	ldr	r2, [r3, #28]
 8000e6c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8000e70:	031b      	lsls	r3, r3, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	61da      	str	r2, [r3, #28]
		return;
	}

	//enable compare output
	//13.4.9 in Ref Manual
	timer.TMR->CCER |= (1U<<(compare.CHANNEL * 4));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	6a19      	ldr	r1, [r3, #32]
 8000e7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	2201      	movs	r2, #1
 8000e86:	409a      	lsls	r2, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	621a      	str	r2, [r3, #32]
 8000e8e:	e000      	b.n	8000e92 <tim2_5_init_output_compare+0x92>
		return;
 8000e90:	bf00      	nop
}
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc90      	pop	{r4, r7}
 8000e98:	4770      	bx	lr

08000e9a <tim2_5_init_input_capture>:
 * channel
 *
 * 13.4.7 in Ref Manual
 */
void tim2_5_init_input_capture(TIM2_5_CONFIG timer, TIM2_5_CAPTURE_COMPARE_CONFIG compare)
{
 8000e9a:	b490      	push	{r4, r7}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	463c      	mov	r4, r7
 8000ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//set the capture/compare selection to be input on TI2 (IC1)
	//for the given channel
	if(compare.CHANNEL == TIM2_5_CH1)
 8000ea6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d106      	bne.n	8000ebc <tim2_5_init_input_capture+0x22>
	{
		timer.TMR->CCMR1 |= (1U << TIM_CCMR1_CC1S_Pos);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f042 0201 	orr.w	r2, r2, #1
 8000eb8:	619a      	str	r2, [r3, #24]
 8000eba:	e01f      	b.n	8000efc <tim2_5_init_input_capture+0x62>
	}
	else if(compare.CHANNEL == TIM2_5_CH2)
 8000ebc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <tim2_5_init_input_capture+0x38>
	{
		timer.TMR->CCMR1 |= (1U << TIM_CCMR1_CC2S_Pos);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ece:	619a      	str	r2, [r3, #24]
 8000ed0:	e014      	b.n	8000efc <tim2_5_init_input_capture+0x62>
	}
	else if(compare.CHANNEL == TIM2_5_CH3)
 8000ed2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d106      	bne.n	8000ee8 <tim2_5_init_input_capture+0x4e>
	{
		timer.TMR->CCMR2 |= (1U << TIM_CCMR2_CC3S_Pos);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	69da      	ldr	r2, [r3, #28]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f042 0201 	orr.w	r2, r2, #1
 8000ee4:	61da      	str	r2, [r3, #28]
 8000ee6:	e009      	b.n	8000efc <tim2_5_init_input_capture+0x62>
	}
	else if(compare.CHANNEL == TIM2_5_CH4)
 8000ee8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d110      	bne.n	8000f12 <tim2_5_init_input_capture+0x78>
	{
		timer.TMR->CCMR2 |= (1U << TIM_CCMR2_CC4S_Pos);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	69da      	ldr	r2, [r3, #28]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000efa:	61da      	str	r2, [r3, #28]
		return;
	}

	//enable capture/compare output
	//13.4.9 in Ref Manual
	timer.TMR->CCER |= (1U<<(compare.CHANNEL * 4));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6a19      	ldr	r1, [r3, #32]
 8000f00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	2201      	movs	r2, #1
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	621a      	str	r2, [r3, #32]
 8000f10:	e000      	b.n	8000f14 <tim2_5_init_input_capture+0x7a>
		return;
 8000f12:	bf00      	nop
}
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc90      	pop	{r4, r7}
 8000f1a:	4770      	bx	lr

08000f1c <tim2_5_init>:
 * configuration
 *
 * 13.4 in Ref Manual
 */
void tim2_5_init(TIM2_5_CONFIG timer)
{
 8000f1c:	b490      	push	{r4, r7}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	463c      	mov	r4, r7
 8000f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//determine which bit to enable in APB1 bus for clock
	//access to the given timer
	if(timer.TMR == TIM2)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2e:	d106      	bne.n	8000f3e <tim2_5_init+0x22>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN_Msk;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	e01f      	b.n	8000f7e <tim2_5_init+0x62>
	}
	else if(timer.TMR == TIM3)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <tim2_5_init+0xc8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <tim2_5_init+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN_Msk;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	e014      	b.n	8000f7e <tim2_5_init+0x62>
	}
	else if(timer.TMR == TIM4)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <tim2_5_init+0xcc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <tim2_5_init+0x4e>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN_Msk;
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	e009      	b.n	8000f7e <tim2_5_init+0x62>
	}
	else if(timer.TMR == TIM5)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <tim2_5_init+0xd0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12a      	bne.n	8000fc8 <tim2_5_init+0xac>
	{
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN_Msk;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <tim2_5_init+0xc4>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
		return;
	}

	//set the prescaler and period
	//clock speed (16MHz)/(prescaler * period) = desired delay
	if(timer.PRESCALER >= 0)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db23      	blt.n	8000fcc <tim2_5_init+0xb0>
	{
		timer.TMR->PSC = timer.PRESCALER - 1;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
	else
	{
		return;
	}

	if(timer.PERIOD >= 0)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db1e      	blt.n	8000fd0 <tim2_5_init+0xb4>
	{
		timer.TMR->ARR = timer.PERIOD - 1;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		return;
	}

	//clear the counter
	timer.TMR->CNT = 0;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24

	//set counter mode (up/down)
	if(timer.COUNTER_MODE == TIM2_5_UP)
 8000fa0:	793b      	ldrb	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <tim2_5_init+0x98>
	{
		timer.TMR->CR1 &= ~TIM_CR1_DIR_Msk;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	f022 0210 	bic.w	r2, r2, #16
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e010      	b.n	8000fd6 <tim2_5_init+0xba>
	}
	else if (timer.COUNTER_MODE == TIM2_5_DOWN)
 8000fb4:	793b      	ldrb	r3, [r7, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10c      	bne.n	8000fd4 <tim2_5_init+0xb8>
	{
		timer.TMR->CR1 |= TIM_CR1_DIR_Msk;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f042 0210 	orr.w	r2, r2, #16
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e006      	b.n	8000fd6 <tim2_5_init+0xba>
		return;
 8000fc8:	bf00      	nop
 8000fca:	e004      	b.n	8000fd6 <tim2_5_init+0xba>
		return;
 8000fcc:	bf00      	nop
 8000fce:	e002      	b.n	8000fd6 <tim2_5_init+0xba>
		return;
 8000fd0:	bf00      	nop
 8000fd2:	e000      	b.n	8000fd6 <tim2_5_init+0xba>
	}
	else
	{
		return;
 8000fd4:	bf00      	nop
	}
}
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc90      	pop	{r4, r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	40000800 	.word	0x40000800
 8000fec:	40000c00 	.word	0x40000c00

08000ff0 <tim2_5_init_pwm>:
	tim2_5_init(timer);
	tim2_5_enable(timer);
}

void tim2_5_init_pwm(TIM2_5_CONFIG timer, TIM2_5_CAPTURE_COMPARE_CONFIG compare, uint16_t duty, TIM2_5_PWM_POLARITY polarity)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08b      	sub	sp, #44	; 0x2c
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	463c      	mov	r4, r7
 8000ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//polarity is determined by the CCxP and
	//CCxNP bits within the CCER register, these
	//are bit masks that will work for all 4 channels
	//in a "math way"
	int ccxp, ccxnp;
	ccxp = (1U << ((compare.CHANNEL * 4) + 1));
 8000ffc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	3301      	adds	r3, #1
 8001004:	2201      	movs	r2, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
	ccxnp = (1U << ((compare.CHANNEL * 4) + 3));
 800100c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	3303      	adds	r3, #3
 8001014:	2201      	movs	r2, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	613b      	str	r3, [r7, #16]

	//enable output compare
	tim2_5_init_capture_compare(timer, compare);
 800101c:	466b      	mov	r3, sp
 800101e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001022:	ca07      	ldmia	r2, {r0, r1, r2}
 8001024:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001028:	463b      	mov	r3, r7
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	f000 f876 	bl	800111c <tim2_5_init_capture_compare>

	//check for the channel, then enable preload bit
	//within the CCMRx register
	switch (compare.CHANNEL )
 8001030:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001034:	2b03      	cmp	r3, #3
 8001036:	d83b      	bhi.n	80010b0 <tim2_5_init_pwm+0xc0>
 8001038:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <tim2_5_init_pwm+0x50>)
 800103a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103e:	bf00      	nop
 8001040:	08001051 	.word	0x08001051
 8001044:	08001069 	.word	0x08001069
 8001048:	08001081 	.word	0x08001081
 800104c:	08001099 	.word	0x08001099
	{
		case TIM2_5_CH1:
			timer.TMR->CCMR1 |= TIM_CCMR1_OC1PE_Msk;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	699a      	ldr	r2, [r3, #24]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f042 0208 	orr.w	r2, r2, #8
 800105a:	619a      	str	r2, [r3, #24]
			timer.TMR->CCR1 |= duty;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001060:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
		case TIM2_5_CH2:
			timer.TMR->CCMR1 |= TIM_CCMR1_OC2PE_Msk;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001072:	619a      	str	r2, [r3, #24]
			timer.TMR->CCR2 |= duty;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001078:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
		case TIM2_5_CH3:
			timer.TMR->CCMR2 |= TIM_CCMR2_OC3PE_Msk;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	69da      	ldr	r2, [r3, #28]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f042 0208 	orr.w	r2, r2, #8
 800108a:	61da      	str	r2, [r3, #28]
			timer.TMR->CCR3 |= duty;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001090:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c
		case TIM2_5_CH4:
			timer.TMR->CCMR2 |= TIM_CCMR2_OC4PE_Msk;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010a2:	61da      	str	r2, [r3, #28]
			timer.TMR->CCR4 |= duty;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80010a8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	641a      	str	r2, [r3, #64]	; 0x40
	}

	//check polarity and configure the polarity bits
	//in the CCER register
	switch(polarity)
 80010b0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d01e      	beq.n	80010f6 <tim2_5_init_pwm+0x106>
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	dc25      	bgt.n	8001108 <tim2_5_init_pwm+0x118>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <tim2_5_init_pwm+0xd6>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d00a      	beq.n	80010da <tim2_5_init_pwm+0xea>
 80010c4:	e020      	b.n	8001108 <tim2_5_init_pwm+0x118>
	{

		case TIM2_5_RISING_EDGE:
			timer.TMR->CCER &= ~(ccxp | ccxnp);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6a1a      	ldr	r2, [r3, #32]
 80010ca:	6979      	ldr	r1, [r7, #20]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	430b      	orrs	r3, r1
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	400a      	ands	r2, r1
 80010d8:	621a      	str	r2, [r3, #32]
		case TIM2_5_FALLING_EDGE:
			timer.TMR->CCER |= ccxp;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	6a19      	ldr	r1, [r3, #32]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	621a      	str	r2, [r3, #32]
			timer.TMR->CCER &= ~ccxnp;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	400a      	ands	r2, r1
 80010f4:	621a      	str	r2, [r3, #32]
		case TIM2_5_BOTH_EDGE:
			timer.TMR->CCER |= (ccxp | ccxnp);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6a1a      	ldr	r2, [r3, #32]
 80010fa:	6979      	ldr	r1, [r7, #20]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	430b      	orrs	r3, r1
 8001100:	4619      	mov	r1, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	621a      	str	r2, [r3, #32]
	}

	//enable auto-reload preload
	timer.TMR->CR1 |= TIM_CR1_ARPE_Msk;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}

0800111c <tim2_5_init_capture_compare>:
/*
 * Function to initialize capture/compare mode for a given timer
 * pin with the channel specified
 */
void tim2_5_init_capture_compare(TIM2_5_CONFIG timer, TIM2_5_CAPTURE_COMPARE_CONFIG compare)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af04      	add	r7, sp, #16
 8001122:	463c      	mov	r4, r7
 8001124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pin_init(timer, compare);
 8001128:	466b      	mov	r3, sp
 800112a:	f107 0220 	add.w	r2, r7, #32
 800112e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001134:	463b      	mov	r3, r7
 8001136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001138:	f7ff fe2c 	bl	8000d94 <pin_init>

	//init the timer
	tim2_5_init(timer);
 800113c:	463b      	mov	r3, r7
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	f7ff feec 	bl	8000f1c <tim2_5_init>

	//check which compare mode is needed and init that mode
	if(compare.CAPTURE_COMPARE_MODE == TIM2_5_OUTPUT)
 8001144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10a      	bne.n	8001162 <tim2_5_init_capture_compare+0x46>
	{
		tim2_5_init_output_compare(timer,compare);
 800114c:	466b      	mov	r3, sp
 800114e:	f107 0220 	add.w	r2, r7, #32
 8001152:	ca07      	ldmia	r2, {r0, r1, r2}
 8001154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001158:	463b      	mov	r3, r7
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	f7ff fe50 	bl	8000e00 <tim2_5_init_output_compare>
 8001160:	e00f      	b.n	8001182 <tim2_5_init_capture_compare+0x66>
	}
	else if(compare.CAPTURE_COMPARE_MODE == TIM2_5_INPUT)
 8001162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10a      	bne.n	8001180 <tim2_5_init_capture_compare+0x64>
	{
		tim2_5_init_input_capture(timer, compare);
 800116a:	466b      	mov	r3, sp
 800116c:	f107 0220 	add.w	r2, r7, #32
 8001170:	ca07      	ldmia	r2, {r0, r1, r2}
 8001172:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001176:	463b      	mov	r3, r7
 8001178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117a:	f7ff fe8e 	bl	8000e9a <tim2_5_init_input_capture>
 800117e:	e000      	b.n	8001182 <tim2_5_init_capture_compare+0x66>
	}
	else
	{
		return;
 8001180:	bf00      	nop
	}

	//enable timer
	//tim2_5_enable(timer);
}
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <tim2_5_enable>:
 * Function to enable timer using CR1
 *
 * 13.4.1 in Ref Manual
 */
void tim2_5_enable(TIM2_5_CONFIG timer)
{
 8001188:	b490      	push	{r4, r7}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	463c      	mov	r4, r7
 8001190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//enable counter
	timer.TMR->CR1 |= TIM_CR1_CEN_Msk;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc90      	pop	{r4, r7}
 80011a8:	4770      	bx	lr
	...

080011ac <uart_init>:
 *
 * Takes a UART struct containing port, pin numbers for RX/TX
 * and USART number. Also takes baudrate.
 */
void uart_init(UART_CONFIG UART, uint32_t baudrate)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	1d3c      	adds	r4, r7, #4
 80011b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011b8:	603b      	str	r3, [r7, #0]
	 * GPIO pin that was specified
	 *
	 * Table 9. in the datasheet shows that AF08 is
	 * for USART6, and the other two are AF07
	*/
	if(UART.TX != USARTX_TX_NONE)
 80011ba:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80011be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c2:	d019      	beq.n	80011f8 <uart_init+0x4c>
	{
		GPIOx_PIN_CONFIG TX_Pin;

		if(UART.USART == USART6)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4a25      	ldr	r2, [pc, #148]	; (800125c <uart_init+0xb0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d102      	bne.n	80011d2 <uart_init+0x26>
		{
			TX_Pin.ALT_FUNC = GPIOx_ALT_AF8;
 80011cc:	2308      	movs	r3, #8
 80011ce:	76bb      	strb	r3, [r7, #26]
 80011d0:	e001      	b.n	80011d6 <uart_init+0x2a>
		} else
		{
			TX_Pin.ALT_FUNC = GPIOx_ALT_AF7;
 80011d2:	2307      	movs	r3, #7
 80011d4:	76bb      	strb	r3, [r7, #26]
		}

		TX_Pin.PIN_MODE = GPIOx_PIN_ALTERNATE;
 80011d6:	2302      	movs	r3, #2
 80011d8:	767b      	strb	r3, [r7, #25]

		TX_Pin.PIN_NUM = UART.TX;
 80011da:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	763b      	strb	r3, [r7, #24]

		TX_Pin.PUPDR_MODE = GPIOx_PUPDR_NONE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	76fb      	strb	r3, [r7, #27]

		TX_Pin.OTYPER_MODE = GPIOx_OTYPER_PUSH_PULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	773b      	strb	r3, [r7, #28]

		gpio_init(UART.PORT, TX_Pin);
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011f4:	f7ff fc6e 	bl	8000ad4 <gpio_init>
	}

	if(UART.RX != USARTX_RX_NONE)
 80011f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d019      	beq.n	8001236 <uart_init+0x8a>
	{
		GPIOx_PIN_CONFIG RX_Pin;

		if(UART.USART == USART6)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <uart_init+0xb0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d102      	bne.n	8001210 <uart_init+0x64>
		{
			RX_Pin.ALT_FUNC = GPIOx_ALT_AF8;
 800120a:	2308      	movs	r3, #8
 800120c:	74bb      	strb	r3, [r7, #18]
 800120e:	e001      	b.n	8001214 <uart_init+0x68>
		} else
		{
			RX_Pin.ALT_FUNC = GPIOx_ALT_AF7;
 8001210:	2307      	movs	r3, #7
 8001212:	74bb      	strb	r3, [r7, #18]
		}

		RX_Pin.PIN_MODE = GPIOx_PIN_ALTERNATE;
 8001214:	2302      	movs	r3, #2
 8001216:	747b      	strb	r3, [r7, #17]

		RX_Pin.PIN_NUM = UART.RX;
 8001218:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	743b      	strb	r3, [r7, #16]

		RX_Pin.PUPDR_MODE = GPIOx_PUPDR_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	74fb      	strb	r3, [r7, #19]

		RX_Pin.OTYPER_MODE = GPIOx_OTYPER_PUSH_PULL;
 8001224:	2300      	movs	r3, #0
 8001226:	753b      	strb	r3, [r7, #20]

		gpio_init(UART.PORT, RX_Pin);
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001232:	f7ff fc4f 	bl	8000ad4 <gpio_init>
	}

	//enable USART on APB1/APB2 clock bus
	uart_enable_clk(UART);
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800123c:	f000 f810 	bl	8001260 <uart_enable_clk>

	//set baudrate in BRR register
	uart_baudrate(UART, baudrate);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	1d3a      	adds	r2, r7, #4
 8001244:	ca07      	ldmia	r2, {r0, r1, r2}
 8001246:	f000 f83f 	bl	80012c8 <uart_baudrate>

	//enable uart/tx/rx in CR1 register
	uart_cr1_enable(UART);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001250:	f000 f8f6 	bl	8001440 <uart_cr1_enable>
}
 8001254:	bf00      	nop
 8001256:	3724      	adds	r7, #36	; 0x24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	40011400 	.word	0x40011400

08001260 <uart_enable_clk>:
 * Function for enabling clock access depending on the USART
 *
 * Based on Fig. 3 in Datasheet, APB1 = USART2, APB2 = USART1/USART6
 */
void uart_enable_clk(UART_CONFIG UART)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Set USART enable bit in peripheral clock enable
	//register for clock access (6.3.11/6.3.12 in Ref Manual)
	//APB1 = 42MHz
	//APB2 = 84MHz
	if(UART.USART == USART2)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <uart_enable_clk+0x54>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d105      	bne.n	8001280 <uart_enable_clk+0x20>
	{
		RCC->APB1ENR |= USART2_EN;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <uart_enable_clk+0x58>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <uart_enable_clk+0x58>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
	}
	if(UART.USART == USART1)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <uart_enable_clk+0x5c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d105      	bne.n	8001294 <uart_enable_clk+0x34>
	{
		RCC->APB2ENR |= USART1_EN;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <uart_enable_clk+0x58>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <uart_enable_clk+0x58>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6453      	str	r3, [r2, #68]	; 0x44
	}
	if(UART.USART == USART6)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <uart_enable_clk+0x60>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d105      	bne.n	80012a8 <uart_enable_clk+0x48>
	{
		RCC->APB2ENR |= USART6_EN;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <uart_enable_clk+0x58>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <uart_enable_clk+0x58>)
 80012a2:	f043 0320 	orr.w	r3, r3, #32
 80012a6:	6453      	str	r3, [r2, #68]	; 0x44
	}

}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40011400 	.word	0x40011400
 80012c4:	00000000 	.word	0x00000000

080012c8 <uart_baudrate>:
 * Function to configure USART baudrate
 *
 * Based on the formula in 19.3.4 in Ref Manual
 */
void uart_baudrate(UART_CONFIG UART,uint32_t bd)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b08f      	sub	sp, #60	; 0x3c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	1d3c      	adds	r4, r7, #4
 80012d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012d4:	603b      	str	r3, [r7, #0]
	double USARTDIV = 0; //stores number to be coded to USART_BRR register
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int i_frac = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
	int mantissa = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	double frac = 0;
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double fracDiff = 0;
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(UART.USART == USART2)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <uart_baudrate+0x160>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d110      	bne.n	800132c <uart_baudrate+0x64>
	{
		//16MHz
		USARTDIV = ((double)APB1_FREQ)/((double)(16*bd));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f8a4 	bl	800045c <__aeabi_ui2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	a141      	add	r1, pc, #260	; (adr r1, 8001420 <uart_baudrate+0x158>)
 800131a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800131e:	f7ff fa41 	bl	80007a4 <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800132a:	e00b      	b.n	8001344 <uart_baudrate+0x7c>
	} else{
		USARTDIV = APB2_FREQ/(16*bd);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4a3e      	ldr	r2, [pc, #248]	; (800142c <uart_baudrate+0x164>)
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f890 	bl	800045c <__aeabi_ui2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	mantissa = (int)USARTDIV; //getting the DIV_MANTISSA part
 8001344:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001348:	f7ff fb9c 	bl	8000a84 <__aeabi_d2iz>
 800134c:	4603      	mov	r3, r0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
	frac = (USARTDIV - mantissa) * 16; //getting DIV_Fraction part
 8001350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001352:	f7ff f893 	bl	800047c <__aeabi_i2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800135e:	f7fe ff3f 	bl	80001e0 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <uart_baudrate+0x168>)
 8001370:	f7ff f8ee 	bl	8000550 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//DIV_Fraction is 4 bits, so anything higher than 15d (0xF) is an overflow
	if(frac > 15)
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <uart_baudrate+0x16c>)
 8001382:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001386:	f7ff fb73 	bl	8000a70 <__aeabi_dcmpgt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <uart_baudrate+0xda>
	{
		//carry over the overflow to the mantissa
		mantissa += 1;
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	3301      	adds	r3, #1
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
		frac = 0;
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	//need to check decimal for rounding purposes, since round() doesn't seem to work
	fracDiff = frac - ((int) frac);
 80013a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013a6:	f7ff fb6d 	bl	8000a84 <__aeabi_d2iz>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f865 	bl	800047c <__aeabi_i2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ba:	f7fe ff11 	bl	80001e0 <__aeabi_dsub>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(fracDiff >= 0.5)
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <uart_baudrate+0x170>)
 80013cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013d0:	f7ff fb44 	bl	8000a5c <__aeabi_dcmpge>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00a      	beq.n	80013f0 <uart_baudrate+0x128>
	{
		frac++;
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <uart_baudrate+0x174>)
 80013e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e4:	f7fe fefe 	bl	80001e4 <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	i_frac = (int)(frac); //want to round down to int
 80013f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013f4:	f7ff fb46 	bl	8000a84 <__aeabi_d2iz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	61fb      	str	r3, [r7, #28]

	//set baudrate in USART_BRR
	//19.6.3 in Ref Manual
	UART.USART->BRR |= (i_frac<<0);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	6899      	ldr	r1, [r3, #8]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	430a      	orrs	r2, r1
 8001406:	609a      	str	r2, [r3, #8]
	UART.USART->BRR |= (mantissa<<4);
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4619      	mov	r1, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	430a      	orrs	r2, r1
 8001416:	609a      	str	r2, [r3, #8]
}
 8001418:	bf00      	nop
 800141a:	373c      	adds	r7, #60	; 0x3c
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	00000000 	.word	0x00000000
 8001424:	416e8480 	.word	0x416e8480
 8001428:	40004400 	.word	0x40004400
 800142c:	00f42400 	.word	0x00f42400
 8001430:	40300000 	.word	0x40300000
 8001434:	402e0000 	.word	0x402e0000
 8001438:	3fe00000 	.word	0x3fe00000
 800143c:	3ff00000 	.word	0x3ff00000

08001440 <uart_cr1_enable>:
 * Function to enable RX/TX/USART in Control Register 1
 *
 * 19.6.4 in Ref Manual
 */
void uart_cr1_enable(UART_CONFIG UART)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(UART.RX != USARTX_RX_NONE)
 800144c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <uart_cr1_enable+0x22>
	{
		UART.USART->CR1 |= USART_CR1_RXEN;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f042 0204 	orr.w	r2, r2, #4
 8001460:	60da      	str	r2, [r3, #12]
	}

	if(UART.TX != USARTX_TX_NONE)
 8001462:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146a:	d005      	beq.n	8001478 <uart_cr1_enable+0x38>
	{
		UART.USART->CR1 |= USART_CR1_TXEN;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f042 0208 	orr.w	r2, r2, #8
 8001476:	60da      	str	r2, [r3, #12]
	}

	UART.USART->CR1 |= USART_CR1_UE;
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001482:	60da      	str	r2, [r3, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopForever+0x6>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopForever+0xe>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopForever+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014be:	f000 f811 	bl	80014e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c2:	f7ff fc17 	bl	8000cf4 <main>

080014c6 <LoopForever>:

LoopForever:
  b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   r0, =_estack
 80014c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80014d4:	0800154c 	.word	0x0800154c
  ldr r2, =_sbss
 80014d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80014dc:	20000044 	.word	0x20000044

080014e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>
	...

080014e4 <__libc_init_array>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	4d0d      	ldr	r5, [pc, #52]	; (800151c <__libc_init_array+0x38>)
 80014e8:	4c0d      	ldr	r4, [pc, #52]	; (8001520 <__libc_init_array+0x3c>)
 80014ea:	1b64      	subs	r4, r4, r5
 80014ec:	10a4      	asrs	r4, r4, #2
 80014ee:	2600      	movs	r6, #0
 80014f0:	42a6      	cmp	r6, r4
 80014f2:	d109      	bne.n	8001508 <__libc_init_array+0x24>
 80014f4:	4d0b      	ldr	r5, [pc, #44]	; (8001524 <__libc_init_array+0x40>)
 80014f6:	4c0c      	ldr	r4, [pc, #48]	; (8001528 <__libc_init_array+0x44>)
 80014f8:	f000 f818 	bl	800152c <_init>
 80014fc:	1b64      	subs	r4, r4, r5
 80014fe:	10a4      	asrs	r4, r4, #2
 8001500:	2600      	movs	r6, #0
 8001502:	42a6      	cmp	r6, r4
 8001504:	d105      	bne.n	8001512 <__libc_init_array+0x2e>
 8001506:	bd70      	pop	{r4, r5, r6, pc}
 8001508:	f855 3b04 	ldr.w	r3, [r5], #4
 800150c:	4798      	blx	r3
 800150e:	3601      	adds	r6, #1
 8001510:	e7ee      	b.n	80014f0 <__libc_init_array+0xc>
 8001512:	f855 3b04 	ldr.w	r3, [r5], #4
 8001516:	4798      	blx	r3
 8001518:	3601      	adds	r6, #1
 800151a:	e7f2      	b.n	8001502 <__libc_init_array+0x1e>
 800151c:	08001544 	.word	0x08001544
 8001520:	08001544 	.word	0x08001544
 8001524:	08001544 	.word	0x08001544
 8001528:	08001548 	.word	0x08001548

0800152c <_init>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr

08001538 <_fini>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	bf00      	nop
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr
